{"version":3,"sources":["components/Header.js","components/Form.js","components/Results.js","pfunctions/calculateNssf.js","pfunctions/calculatePaye.js","containers/Calculator.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","header","this","props","headerType","headerText","includes","React","createElement","className","Component","Form","onSubmit","htmlFor","name","id","value","year","onChange","changeHandler","required","selected","type","placeholder","grossPay","aria-label","style","display","checked","nssf","isExempted","Results","ref","refProps","toLocaleString","totalDeductions","taxablePay","relief","paye","calculateNssf","TypeError","e","message","calculatePaye","tax","tp","rate","mr","r","toFixed","Calculator","handleChange","target","setState","prevState","nssfValue","preventDefault","state","payeResults","payeCal","isSubmitted","console","log","resultsRef","createRef","current","scrollIntoView","block","behavior","inline","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sWAkCeA,G,6KA7BT,IAAIC,EAmBJ,OANGA,EAVEC,KAAKC,MAAMC,YAAeF,KAAKC,MAAME,WAG9BH,KAAKC,MAAMC,YAAeF,KAAKC,MAAME,WALlC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MAQzBC,SAASJ,KAAKC,MAAMC,YAGE,iBAAzBF,KAAKC,MAAME,WACjBE,IAAMC,cAAc,KAAM,CAAEC,UAAW,SAAW,6CAGlDF,IAAMC,cAAcN,KAAKC,MAAMC,WAAY,CAAEK,UAAW,kBAAoBP,KAAKC,MAAME,YANvFE,IAAMC,cAAc,KAAM,CAAEC,UAAW,SAAW,wEAHlDF,IAAMC,cAAc,KAAM,CAAEC,UAAW,SAAW,gCAHlDF,IAAMC,cAAc,KAAM,CAAEC,UAAW,mBAAqB,yBAgBrE,yBAAKA,UAAU,sBACZ,yBAAKA,UAAU,UACXR,Q,GAxBKS,cC0DNC,G,6KAxDT,OACG,yBAAKF,UAAU,oBACZ,yBAAKA,UAAU,UAEZ,0BAAMA,UAAU,UAAUG,SAAWV,KAAKC,MAAMS,UAC7C,yBAAKH,UAAU,cACZ,2BAAOI,QAAQ,QAAf,oBACA,4BAAQC,KAAK,OAAOC,GAAG,OAAON,UAAU,gBAAgBO,MAAOd,KAAKC,MAAMc,KAAMC,SAAUhB,KAAKC,MAAMgB,cAAeC,UAAQ,GACzH,4BAAQJ,MAAM,GAAGK,UAAQ,GAAzB,oBACA,4BAAQL,MAAM,QAAd,YAIN,yBAAKP,UAAU,cACZ,2BAAOI,QAAQ,YAAf,mBACA,yBAAKJ,UAAU,oBACZ,yBAAKA,UAAU,uBACZ,0BAAMA,UAAU,oBAAhB,QAEH,2BAAOa,KAAK,SAASb,UAAU,eAAeM,GAAG,WAAWD,KAAK,WAAWS,YAAY,QAAQP,MAAOd,KAAKC,MAAMqB,SAAUN,SAAWhB,KAAKC,MAAMgB,cAAgBC,UAAQ,EAACK,aAAW,uBACtL,yBAAKhB,UAAU,sBACZ,0BAAMA,UAAU,oBAAhB,UAKT,yBAAKA,UAAU,cACZ,2BAAOiB,MAAO,CAACC,QAAS,UAAxB,wBACA,yBAAKlB,UAAU,qDACZ,2BAAOa,KAAK,QAAQb,UAAU,uBAAuBK,KAAK,OAAOC,GAAG,MAAMC,MAAM,MAAMY,QAA6B,QAApB1B,KAAKC,MAAM0B,KAAgBX,SAAWhB,KAAKC,MAAMgB,gBAChJ,2BAAON,QAAQ,MAAMJ,UAAU,wBAA/B,gBAEH,yBAAKA,UAAU,qDACZ,2BAAOa,KAAK,QAAQb,UAAU,uBAAuBK,KAAK,OAAOC,GAAG,MAAMC,MAAM,MAAMY,QAA6B,QAApB1B,KAAKC,MAAM0B,KAAgBX,SAAWhB,KAAKC,MAAMgB,gBAChJ,2BAAON,QAAQ,MAAMJ,UAAU,wBAA/B,oBAIN,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kCACZ,2BAAOa,KAAK,WAAWb,UAAU,uBAAuBK,KAAK,aAAaC,GAAG,aAAaC,OAAO,EAAMY,SAAmC,IAA1B1B,KAAKC,MAAM2B,WAAqBZ,SAAWhB,KAAKC,MAAMgB,gBACtK,2BAAON,QAAQ,aAAaJ,UAAU,wBAAtC,mDAIN,yBAAKA,UAAU,cACZ,4BAAQa,KAAK,SAASb,UAAU,mBAAhC,qB,GAhDFC,cC0CJqB,G,6KAvCT,OACG,yBAAKtB,UAAU,sBAAsBuB,IAAK9B,KAAKC,MAAM8B,UAClD,yBAAKxB,UAAU,UACZ,kBAAC,EAAD,CAAQL,WAAW,KAAKC,WAAW,YAEnC,2BAAOI,UAAU,uBACd,+BACG,4BACG,+CACA,oCAAWP,KAAKC,MAAMqB,SAAYtB,KAAKC,MAAMqB,SAAUU,iBAAmB,EAA1E,MAEH,4BACG,oDACA,oCAAWhC,KAAKC,MAAM0B,KAAQ3B,KAAKC,MAAM0B,KAAMK,iBAAmB,EAAlE,MAEH,4BACG,kDACA,oCAAWhC,KAAKC,MAAMgC,gBAAmBjC,KAAKC,MAAMgC,gBAAiBD,iBAAmB,EAAxF,MAEH,4BACG,iDACA,oCAAWhC,KAAKC,MAAMiC,WAAclC,KAAKC,MAAMiC,WAAYF,iBAAmB,EAA9E,MAEH,4BACG,kDACA,oCAAWhC,KAAKC,MAAMkC,OAAUnC,KAAKC,MAAMkC,OAAQH,iBAAmB,EAAtE,MAEH,wBAAIzB,UAAU,gBACX,uCACA,oCAAWP,KAAKC,MAAMmC,KAAQpC,KAAKC,MAAMmC,KAAMJ,iBAAmB,EAAlE,c,GA/BFxB,c,MCqBP6B,MAzBf,SAAuBf,GAIpB,IAGG,IAAKA,EACF,OAAO,EACH,GAAuB,iBAAZA,EACf,MAAM,IAAIgB,UAAU,oCAOvB,OANWhB,GAAY,KACF,IAAXA,EAEA,KAKX,MAAOiB,GACN,MAAM,GAAN,OAAUA,EAAE3B,KAAZ,aAAqB2B,EAAEC,W,eCwDdC,MA5Ef,SAAuBnB,EAAUK,EAAMC,GACpC,IACG,IAAKN,IAAaK,IAASC,EACxB,OAAO,EAGV,IAAKN,EACF,OAAO,EAGV,GAAuB,iBAAZA,GAAuC,iBAARK,EACvC,MAAM,IAAIW,UAAU,0BAGvB,IAOII,EAAM,EAAGN,EAAO,EAAGF,EAAa,EAAGD,EAAkB,EAmBzD,IAjBmB,IAAfL,GAAuBN,GAAY,MACpCW,EAAkBX,EAAWK,EAC7BO,EAAa,IACU,IAAfN,GAAuBN,EAAW,KAE1CY,EAAaZ,GADbW,EAAkB,KAASN,GAEnBL,GAAY,MACpBW,EAAkBN,EAClBO,EAAa,GAGbA,EAAaZ,GADbW,EAAkBN,IAKrBO,EAAcA,EAAa,EAAKA,EAAa,GAE5B,EAAG,CACjB,IADiB,EACbS,EAAKT,EADQ,cA1BD,CAChB,CAAC,KAAO,IACR,CAAC,MAAO,KACR,CAAC,MAAO,IACR,CAAC,EAAG,OAsBa,IAGjB,2BAA+B,CAAC,IAAvBU,EAAsB,sBACdA,EADc,GACvBC,EADuB,KACnBC,EADmB,KAG5B,KAAIH,EAAKE,GAAa,IAAPA,GAGR,CACJH,GAAOC,EAAKG,EACZ,MAJAJ,GAAOG,EAAKC,EACZH,GAAME,GARK,8BAejBT,IAASM,EAlCuE,MAkCzDK,QAAQ,QAE/BX,EAAO,EAYV,MATU,CACPd,WACAK,OACAM,kBACAC,aACAC,OA5CgF,KA6ChFC,KAAMA,EAAO,EAAIA,EAAO,GAK5B,MAAOG,GACN,MAAM,GAAN,OAAUA,EAAE3B,KAAZ,aAAqB2B,EAAEC,WCoBdQ,E,kDAnFZ,WAAY/C,GAAQ,IAAD,8BAChB,cAAMA,IAmBTgD,aAAe,SAACV,GACb,IAAI3B,EAAO2B,EAAEW,OAAOtC,KAEE,eAAlB2B,EAAEW,OAAOtC,KACV,EAAKuC,UAAU,SAACC,GAEb,MAAO,CACJxB,YAFsC,IAAzBwB,EAAUxB,eAO7B,EAAKuB,SAAL,eACIvC,EAAO2B,EAAEW,OAAOpC,SAjCP,EAuCnBJ,SAAW,SAAC6B,GAET,IAAIc,EADJd,EAAEe,iBAICD,EADqB,QAApB,EAAKE,MAAM5B,KACAU,GAAe,EAAKkB,MAAMjC,UAE1B,IAGf,IAAMkC,EAAcf,GAAe,EAAKc,MAAMjC,SAAU+B,EAAW,EAAKE,MAAM3B,YAE1E4B,EACD,EAAKL,SAAS,CACXM,QAASD,EACTE,aAAa,IAMhBC,QAAQC,IAAI,8BA1Df,EAAKL,MAAQ,CACVxC,KAAM,GACNO,SAAU,EACVK,KAAM,GACNC,YAAY,EACZ6B,QAAS,GACTC,aAAa,GAGhB,EAAKG,WAAaxD,IAAMyD,YAXR,E,iEAeZ9D,KAAKuD,MAAMG,aACZ1D,KAAK6D,WAAWE,QAAQC,eAAe,CAAEC,MAAO,QAASC,SAAU,SAAUC,OAAQ,c,+BAkDxF,OACG,yBAAK5D,UAAU,OACZ,yBAAKA,UAAU,sBACZ,kBAAC,EAAD,CAAQL,WAAW,KAAKC,WAAW,oBACnC,kBAAC,EAAD,iBAAUH,KAAKuD,MAAf,CAAsBtC,cAAejB,KAAKiD,aAAcvC,SAAUV,KAAKU,aAG1E,yBAAKH,UAAU,UAEf,yBAAKA,UAAU,SAASuB,IAAK9B,KAAK6D,YAC7B7D,KAAKuD,MAAMG,aAAe,kBAAC,EAAD,iBAAa1D,KAAKuD,MAAME,QAAxB,CAAiC1B,SAAU/B,KAAK6D,oB,GA7ElErD,aCIV4D,MARf,WACE,OACE,yBAAK7D,UAAU,mBACb,kBAAC,EAAD,QCKc8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAM9C,c","file":"static/js/main.2d8dfdf6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../scss/Header.scss';\n\nclass Header extends Component {\n   render() {\n      let header;\n      let headings = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\n      if (!this.props.headerType && !this.props.headerText) {\n         header = React.createElement('h1', { className: 'default-heading' }, \"I'm a Default Header!\");\n\n      } else if (!this.props.headerType || !this.props.headerText) {\n         header = React.createElement('h4', { className: 'error' }, 'Error: one props is missing!');\n\n      } else if (!headings.includes(this.props.headerType)) {\n         header = React.createElement('h4', { className: 'error' }, 'Error: headerType props must be a string and valid HTML heading tag!');\n\n      } else if (typeof this.props.headerText != 'string') {\n         header = React.createElement('h4', { className: 'error' }, 'Error: headerText props must be a string!');\n\n      } else {\n         header = React.createElement(this.props.headerType, { className: 'normal-heading' }, this.props.headerText);\n      }\n      \n      return (\n         <div className=\"row header-wrapper\">\n            <div className=\"col-12\">\n               {header}\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport '../scss/Form.scss';\n\nclass Form extends Component {\n   render() {\n      return (\n         <div className=\"row form-wrapper\">\n            <div className=\"col-12\">\n\n               <form className=\"theForm\" onSubmit={ this.props.onSubmit }>\n                  <div className=\"form-group\">\n                     <label htmlFor=\"year\"> Taxation Year: </label>\n                     <select name=\"year\" id=\"year\" className=\"custom-select\" value={this.props.year} onChange={this.props.changeHandler} required>\n                        <option value=\"\" selected> Select year... </option>\n                        <option value=\"2020\"> 2020 </option>\n                     </select>\n                  </div>\n\n                  <div className=\"form-group\">\n                     <label htmlFor=\"grossPay\"> Gross Income: </label>\n                     <div className=\"input-group mb-3\">\n                        <div className=\"input-group-prepend\">\n                           <span className=\"input-group-text\">KES</span>\n                        </div>\n                        <input type=\"number\" className=\"form-control\" id=\"grossPay\" name=\"grossPay\" placeholder=\"75000\" value={this.props.grossPay} onChange={ this.props.changeHandler } required aria-label=\"Gross Income Input\" />\n                        <div className=\"input-group-append\">\n                           <span className=\"input-group-text\">.00</span>\n                        </div>\n                     </div>\n                  </div>\n\n                  <div className=\"form-group\">\n                     <label style={{display: \"block\"}}> NSSF Contribution: </label>\n                     <div className=\"custom-control custom-radio custom-control-inline\">\n                        <input type=\"radio\" className=\"custom-control-input\" name=\"nssf\" id=\"old\" value=\"old\" checked={this.props.nssf === 'old'} onChange={ this.props.changeHandler } />\n                        <label htmlFor=\"old\" className=\"custom-control-label\"> Old (200) </label>\n                     </div>\n                     <div className=\"custom-control custom-radio custom-control-inline\">\n                        <input type=\"radio\" className=\"custom-control-input\" name=\"nssf\" id=\"new\" value=\"new\" checked={this.props.nssf === 'new'} onChange={ this.props.changeHandler } />\n                        <label htmlFor=\"new\" className=\"custom-control-label\"> New (Tiered) </label>\n                     </div>\n                  </div>\n\n                  <div className=\"form-group disability\">\n                     <div className=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" name=\"isExempted\" id=\"isExempted\" value={true} checked={this.props.isExempted === true} onChange={ this.props.changeHandler } />\n                        <label htmlFor=\"isExempted\" className=\"custom-control-label\"> I have Disability Tax Exemption Certificate </label>\n                     </div>\n                  </div>\n\n                  <div className=\"form-group\">\n                     <button type=\"submit\" className=\"btn btn-primary\">Calculate</button>\n                  </div>\n               </form>\n\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport Header from './Header';\nimport '../scss/Results.scss';\n\nclass Results extends Component {\n   render() {\n      return (\n         <div className=\"row results-wrapper\" ref={this.props.refProps}>\n            <div className=\"col-12\">\n               <Header headerType=\"h3\" headerText=\"Results\" />\n\n               <table className=\"table table-striped\">\n                  <tbody>\n                     <tr>\n                        <td> Gross Income: </td>\n                        <td> Kes { this.props.grossPay ? (this.props.grossPay).toLocaleString() : 0 } </td>\n                     </tr>\n                     <tr>\n                        <td> NSSF Contribution: </td>\n                        <td> Kes { this.props.nssf ? (this.props.nssf).toLocaleString() : 0 } </td>\n                     </tr>\n                     <tr>\n                        <td> Total Deduction: </td>\n                        <td> Kes { this.props.totalDeductions ? (this.props.totalDeductions).toLocaleString() : 0 } </td>\n                     </tr>\n                     <tr>\n                        <td> Taxable Income: </td>\n                        <td> Kes { this.props.taxablePay ? (this.props.taxablePay).toLocaleString() : 0 } </td>\n                     </tr>\n                     <tr>\n                        <td> Personal Relief: </td>\n                        <td> Kes { this.props.relief ? (this.props.relief).toLocaleString() : 0 } </td>\n                     </tr>\n                     <tr className=\"paye-results\">\n                        <td> PAYE: </td>\n                        <td> Kes { this.props.paye ? (this.props.paye).toLocaleString() : 0 } </td>\n                     </tr>\n                  </tbody>\n               </table>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Results;","function calculateNssf(grossPay) {\n   // This function is used only to calculate New(tiered) NSSF values. \n   // Old values for all grossPays is 200.\n\n   try {\n      let nssf;\n\n      if (!grossPay) {\n         return 0;\n      } else if (typeof grossPay != 'number') {\n         throw new TypeError('grossPay must be of type number!');\n      } else if (grossPay <= 18000) {\n         nssf = grossPay * 0.06;\n      } else {\n         nssf = 1080;\n      }\n\n      return nssf;\n\n   } catch (e) {\n      return `${e.name}: ${e.message}`;\n   }\n\n}\n\nexport default calculateNssf;","function calculatePaye(grossPay, nssf, isExempted) {\n   try {\n      if (!grossPay && !nssf && !isExempted) {\n         return 0;\n      }\n\n      if (!grossPay) {\n         return 0;\n      }\n\n      if (typeof grossPay != 'number' || typeof nssf != 'number') {\n         throw new TypeError('Wrong argument type(s)');\n      }\n\n      let currentRates = [\n         [24000, 0.1],\n         [16667, 0.15],\n         [16667, 0.2],\n         [1, 0.25]\n      ];\n\n      let tax = 0, paye = 0, taxablePay = 0, totalDeductions = 0, payeCal = {}, relief = 2400;\n\n      if (isExempted === true && grossPay <= 150000) {\n         totalDeductions = grossPay + nssf;\n         taxablePay = 0;\n      } else if (isExempted === true && grossPay > 150000) {\n         totalDeductions = 150000 + nssf;\n         taxablePay = grossPay - totalDeductions;\n      } else if (grossPay <= 24000) {\n         totalDeductions = nssf;\n         taxablePay = 0;\n      } else {\n         totalDeductions = nssf;\n         taxablePay = grossPay - totalDeductions;\n      }\n\n      // To handle calculations like (151000 - 151080)\n      taxablePay = (taxablePay > 0) ? taxablePay : 0;\n\n      if (taxablePay > 0) {\n         let tp = taxablePay;\n\n         for (let rate of currentRates) {\n            let [mr, r] = rate;\n   \n            if (tp > mr && mr !== 1) {\n               tax += mr * r;\n               tp -= mr;\n            } else {\n               tax += tp * r;\n               break;\n            }\n         }\n\n         paye = +(tax - relief).toFixed(2);\n      } else {\n         paye = 0;\n      }\n      \n      payeCal = {\n         grossPay,\n         nssf,\n         totalDeductions,\n         taxablePay,\n         relief,\n         paye: paye > 0 ? paye : 0\n      };\n\n      return payeCal;\n\n   } catch (e) {\n      return `${e.name}: ${e.message}`;\n   }\n}\n\nexport default calculatePaye;","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Form from '../components/Form';\nimport Results from '../components/Results';\nimport '../scss/Calculator.scss';\nimport calculateNssf from '../pfunctions/calculateNssf';\nimport calculatePaye from '../pfunctions/calculatePaye';\n\nclass Calculator extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         year: '',\n         grossPay: 0,\n         nssf: '',\n         isExempted: false,\n         payeCal: {},\n         isSubmitted: false\n      };\n      \n      this.resultsRef = React.createRef();\n   }\n\n   componentDidUpdate() {\n      if (this.state.isSubmitted) {\n         this.resultsRef.current.scrollIntoView({ block: 'start', behavior: 'smooth', inline: 'nearest' });\n      }\n   }\n\n   handleChange = (e) => {\n      let name = e.target.name;\n\n      if (e.target.name === 'isExempted') {\n         this.setState( (prevState) => {\n            let isChecked = prevState.isExempted === false ? true : false;\n            return {\n               isExempted: isChecked\n            }\n         });\n\n      } else {\n         this.setState({\n            [name]: e.target.value\n         });\n      }\n\n   };\n\n   onSubmit = (e) => {\n      e.preventDefault();\n      let nssfValue;\n      \n      if (this.state.nssf === 'new') {\n         nssfValue = calculateNssf(+this.state.grossPay);\n      } else {\n         nssfValue = 200;\n      }\n\n      const payeResults = calculatePaye(+this.state.grossPay, nssfValue, this.state.isExempted);\n\n      if (payeResults) {\n         this.setState({\n            payeCal: payeResults,\n            isSubmitted: true\n         });\n\n         //this.resultsRef.current.scrollIntoView({ block: 'start', behavior: 'smooth', inline: 'nearest' });\n\n      } else {\n         console.log(\"Oops! Can't compute Paye!\");\n      }\n\n   };\n\n   render() {\n      return (\n         <div className=\"row\">\n            <div className=\"col-12 cal-wrapper\">\n               <Header headerType=\"h1\" headerText=\"PAYE Calculator\" />\n               <Form {...this.state} changeHandler={this.handleChange} onSubmit={this.onSubmit} />\n            </div>\n\n            <div className=\"w-100\"></div>\n\n            <div className=\"col-12\" ref={this.resultsRef}>\n               { this.state.isSubmitted && <Results {...this.state.payeCal} refProps={this.resultsRef} /> }\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Calculator;","import React from 'react';\nimport '../scss/App.scss';\nimport Calculator from './Calculator';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}